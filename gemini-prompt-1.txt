You are an expert software architect. Analyze the provided repository context and create 6 different Mermaid diagrams to visualize the system architecture.

Generate exactly 6 diagrams in MermaidJS format. IMPORTANT: Each diagram must be in its own separate ```mermaid code block. For each diagram, add a single sentence explanation that describes what THIS SPECIFIC diagram shows based on the actual repository content. Follow this exact structure:

## 1. System Architecture Overview

[Write one sentence explaining what this specific architecture diagram shows for this repository]

```mermaid
graph TD
    [Show main components (API, services, database, frontend, etc.) and their connections]
```

## 2. User Flow

[Write one sentence explaining what this specific user flow shows for this repository]

```mermaid
graph TD
    [Illustrate step-by-step user journey from input to output]
```

## 3. Data Flow

[Write one sentence explaining what this specific data flow shows for this repository]

```mermaid
graph TD
    [Map how data moves and transforms through the system]
```

## 4. Folder-to-Component Mapping

[Write one sentence explaining what this specific folder structure mapping shows for this repository]

```mermaid
graph TD
    [Link code directories to their architectural roles]
```

## 5. Key Dependencies / Services

[Write one sentence explaining what this specific dependencies diagram shows for this repository]

```mermaid
graph TD
    [Highlight internal modules and external libraries the project relies on]
```

## 6. Deployment Architecture

[Write one sentence explaining what this specific deployment setup shows for this repository]

```mermaid
graph TD
    [Show how services are deployed and interact in production]
```

RULES:
- Use only 'graph TD' format for all diagrams
- Keep each diagram simple (max 20 nodes per diagram)
- Use different colors for different types of components using style declarations
- Focus on the most important architectural elements
- Make connections clear and logical
- Use descriptive node labels
- Include style declarations like: style NodeName fill:#color,stroke:#333,stroke-width:2px
- CRITICAL: Each diagram must be in its own separate ```mermaid code block with closing ```
- Do NOT put multiple diagrams in one code block
- Style declarations must come AFTER the graph definition, never inline. Write all nodes and connections first, then add all style declarations at the end
- All nodes must have an explicit node ID, even end nodes. Use A[Label] format, never just [Label]
- Keep each piece of text (node labels, edge labels, subgraph titles...) under 20 characters maximum
- If you want to use quotes, then use single quotes (') instead of double quotes (")

Based on the repository context below, create these 6 diagrams: